package org.zgg.jdk8.streamapi;

import org.zgg.jdk8.data.Employee;
import org.zgg.jdk8.data.EmployeeData;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.stream.Stream;

/**
 * 1. Stream是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列
 * Stream关注的是对数据的运算，与CPU打交道
 * 集合关注的是数据的存储，与内存打交道
 * <p>
 * 2.
 * - Stream 自己不会存储元素。
 * - Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。
 * - Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行
 * <p>
 * 3.Stream 执行流程
 * - Stream的实例化
 * - 一系列的中间操作（过滤、映射、...)
 * - 终止操作
 * <p>
 * 4.说明：
 * - 一个中间操作链，对数据源的数据进行处理
 * - 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用
 * <p>
 * <p>
 * 测试Stream的实例化
 */
public class StreamApiTest01 {

    //创建 Stream方式一：通过集合
    // default Stream<E> stream() : 返回一个顺序流
    // default Stream<E> parallelStream() : 返回一个并行流
    @Test
    public void test1() {
        List<Employee> employees = EmployeeData.getEmployees();

        Stream<Employee> stream1 = employees.stream();
        stream1.forEach(System.out::println);
        System.out.println("---------------------------");

        Stream<Employee> stream2 = employees.parallelStream();
        stream2.forEach(System.out::println);
    }

    //创建 Stream方式二：通过数组
    // Arrays.stream  Returns a sequential Stream with the specified array as its source.
    // static <T> Stream<T> stream(T[] array): 返回一个流
    @Test
    public void test2() {
        String[] arr = {"a", "b", "c"};
        Stream<String> stream = Arrays.stream(arr);
        stream.forEach(System.out::println);
    }

    //创建 Stream方式三：通过Stream的of()
    // Stream.of  Returns a [sequential ordered] stream whose elements are the specified values.
    // public static<T> Stream<T> of(T... values) : 返回一个流
    @Test
    public void test3() {
        Stream<String> stream = Stream.of("a", "b", "c");
        stream.forEach(System.out::println);
    }

    //创建 Stream方式四：创建无限流
    // 迭代   public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)
    //         Returns an [infinite sequential ordered] Stream
    //         将f应用在seed这个初始值上，产生新值，依次迭代产生
    // 生成   public static<T> Stream<T> generate(Supplier<T> s)
    //         Returns an [infinite sequential unordered] stream where each element is generated by the provided Supplier.
    //         根据Supplier提供的数据产生流
    @Test
    public void test4() {
        Stream<Integer> stream1 = Stream.iterate(0, n -> n + 2);
        stream1.forEach(System.out::println);

        System.out.println("---------------------------");
        Stream<Double> stream2 = Stream.generate(Math::random);
        stream2.forEach(System.out::println);
    }
}
